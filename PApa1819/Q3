// QUESTION 3

// Instructions for students who are using this for practice:
//
// (1) Copy and paste this entire file into the editor of Source Academy
//     Playground at https://sourceacademy.nus.edu.sg/playground
// (2) Write your solution for each task in the Source Academy Playground.
// (3) Run the program to test your solution on the given testcases.


//===============================================================
// These functions are provided for running the testcases
// in the Source Academy Playground.
// They are NOT part of the actual testing facility provided
// in the actual Practical Assessment.
//===============================================================
// Tests whether arrays A and B are structurally equal.
function equal_array(A, B) {
    if (!is_array(A) || !is_array(B)) {
        return false;
    } else if (array_length(A) !== array_length(B)) {
        return false;
    } else {
        let is_equal = true;
        const len = array_length(A);
        for (let i = 0; is_equal && i < len; i = i + 1) {
            if (is_array(A[i]) || is_array(B[i])) {
                is_equal = equal_array(A[i], B[i]);
            } else {
                is_equal = equal(A[i], B[i]);
            }
        }
        return is_equal;
    }
}
// NOTE: This is NOT the actual assert function used
//       in the actual Practical Assessment.
function assert(test_name, test_func, truth, dependence) {
    const result = test_func();
    const is_equal = (is_array(truth)? equal_array(result, truth)
                                     : equal(result, truth));
    if (is_equal) {
        display(test_name + ": PASSED");
    } else {
        display(test_name + ": FAILED <<<");
    }
}
//===============================================================



//===============================================================
// TASK 3A(I)
//===============================================================
function count_lower_neighbors(emap, r, c) {
    // WRITE HERE.
    const rows = array_length(emap);
    const cols = array_length(emap[0]);
    if (r <= 0 || r >= rows - 1 || c <= 0 || c >= cols - 1) {
        return 0;
    }
    let ans = 0;
    const me = emap[r][c];
    const d = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];
    for (let i = 0; i < 8; i = i + 1) {
        if (emap[r + d[i][0]][c + d[i][1]] < me) {
            ans = ans + 1;
        }
    }
    return ans;
}
//===============================================================
// TASK 3A(II)
//===============================================================
function count_peaks(emap) {
    // WRITE HERE.
    let ans = 0;
    const rows = array_length(emap);
    const cols = array_length(emap[0]);
    for (let i = 0; i < rows; i = i + 1) {
        for (let j = 0 ; j < cols; j = j + 1) {
            if (count_lower_neighbors(emap, i, j) === 8) {
                ans = ans + 1;
            }
        }
    }
    return ans;
}
//===============================================================
// TASK 3B
//===============================================================
function count_islands(emap) {
    // WRITE HERE.
    const rows = array_length(emap);
    const cols = array_length(emap[0]);
    let ans = 0;
    function go(r, c) {
        const d = [[-1, 0], [0, -1], [0, 1], [1, 0]];
        emap[r][c] = 0;
        for (let i = 0; i < 4; i = i + 1) {
            const r2 = r + d[i][0];
            const c2 = c + d[i][1];
            if (r2 >= 0 && r2 <= rows - 1 && c2 >= 0 && c2 <= cols - 1 && emap[r2][c2] > 0){
                emap[r2][c2] = 0;
                go(r2, c2);
            }
        }
    }
    for (let i = 0; i < rows; i = i + 1) {
        for (let j = 0 ; j < cols; j = j + 1) {
            if (emap[i][j] !== 0) {
                go(i, j);
                ans = ans + 1;
            }
        }
    }
    return ans;
}
count_islands([[2,0], [0,1]]);

// TASK 3B TESTS
const emapB1 =
[[2, 1, 0, 2, 1, 1, 3],
 [0, 1, 0, 1, 0, 0, 2],
 [0, 0, 0, 2, 3, 1, 1],
 [1, 0, 2, 0, 0, 0, 0],
 [0, 0, 1, 2, 0, 0, 0],
 [1, 0, 3, 0, 1, 1, 2]]; // 6 islands
const emapB2 =
[[1, 2, 0, 0, 1, 0, 0, 1],
 [1, 2, 2, 3, 1, 0, 2, 1],
 [0, 1, 1, 0, 1, 0, 0, 1],
 [0, 0, 0, 0, 0, 3, 3, 0],
 [1, 1, 2, 0, 0, 0, 0, 0],
 [1, 0, 1, 0, 0, 1, 2, 3],
 [1, 3, 2, 1, 1, 0, 1, 1]]; // 5 islands
assert("3B_1", () => count_islands([[0]]), 0, []);
assert("3B_2", () => count_islands([[1]]), 1, []);
assert("3B_3", () => count_islands([[0,0], [0,0]]), 0, []);
assert("3B_4", () => count_islands([[2,1], [1,3]]), 1, []);
assert("3B_5", () => count_islands([[0,1], [0,0]]), 1, []);
assert("3B_6", () => count_islands([[2,0], [0,1]]), 2, []);
assert("3B_7", () => count_islands(emapB1), 6, []);
assert("3B_8", () => count_islands(emapB2), 5, []);


//===============================================================
