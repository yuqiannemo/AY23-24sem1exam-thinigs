// Instructions for students who are using this for practice:
//
// (1) Copy and paste this entire file into the editor of Source Academy
//     Playground at https://sourceacademy.nus.edu.sg/playground
// (2) Write your solution for each task in the Source Academy Playground.
// (3) Run the program to test your solution on the given testcases.


////////////////////////////////////////////////////////////
// Question 2A
////////////////////////////////////////////////////////////

function all_different(nums) {
    // WRITE HERE.
    return is_null(nums) 
           ? true
           : is_null(member(head(nums), tail(nums))) && all_different(tail(nums));
}



////////////////////////////////////////////////////////////
// Question 2B
////////////////////////////////////////////////////////////

function is_valid_toto_set(nums, n, min, max) {
    // WRITE HERE.
    return !(all_different(nums) && length(nums) === n)
           ? false
           : accumulate((x, y) => x >= min && x <= max && y, true, nums);
}



////////////////////////////////////////////////////////////
// Question 2C
////////////////////////////////////////////////////////////

function num_of_matches(numsA, numsB) {
    // WRITE HERE.
    return is_null(numsA)
           ? 0
           : is_null(numsB)
           ? 0
           : is_null(member(head(numsA), numsB))
           ? num_of_matches(tail(numsA), numsB)
           : 1 + num_of_matches(tail(numsA), remove(head(numsA), numsB));
}



////////////////////////////////////////////////////////////
// Question 2D
////////////////////////////////////////////////////////////

function check_winning_group(bet_nums, draw_nums, extra_num) {
    // WRITE HERE.
    extra_num = list(extra_num);
    function check_extra(bett, change_draw_nums) {
        return is_null(change_draw_nums)
               ? num_of_matches(extra_num, bett) === 1
               : check_extra(remove(head(change_draw_nums), bett), tail(change_draw_nums));
    }
    const n = length(draw_nums);
    const cnt = num_of_matches(bet_nums, draw_nums);
    return cnt === n
           ? 1
           : cnt === n - 1
           ? (check_extra(bet_nums, draw_nums) ? 2 : 3)
           : cnt === n - 2
           ? (check_extra(bet_nums, draw_nums) ? 4 : 5)
           : 0;
}