// Instructions for students who are using this for practice:
//
// (1) Copy and paste this entire file into the editor of Source Academy
//     Playground at https://sourceacademy.nus.edu.sg/playground
// (2) Write your solution for each task in the Source Academy Playground.
// (3) Run the program to test your solution on the given testcases.


////////////////////////////////////////////////////////////
// Question 1A
////////////////////////////////////////////////////////////

function is_nucleobase(s) {
    // WRITE HERE.
    return s === "A" || s === "C" || s === "G" || s === "T"
           ? true
           : false;
}



////////////////////////////////////////////////////////////
// Question 1B
////////////////////////////////////////////////////////////

function is_dna_strand(xs) {
    // WRITE HERE.
    return is_null(xs)
           ? true
           : is_nucleobase(head(xs)) && is_dna_strand(tail(xs));
}



////////////////////////////////////////////////////////////
// Question 1C
////////////////////////////////////////////////////////////

function combine(xss) {
    // WRITE HERE.
    return accumulate(append, null, xss);
}



////////////////////////////////////////////////////////////
// Question 1D
////////////////////////////////////////////////////////////

function oxoguanine_repair(xs) {
    // WRITE HERE.
    return accumulate((x, y) => x === "8" ? pair("G", y) : pair(x, y), null, xs);
}



////////////////////////////////////////////////////////////
// Question 1E
////////////////////////////////////////////////////////////

function find_gene_start(xs) {
    // WRITE HERE.
    return length(xs) < 3
           ? null
           : head(xs) === "A" && head(tail(xs)) === "T" && head(tail(tail(xs))) === "G"
           ? list(tail(tail(tail(xs))))
           : find_gene_start(tail(xs));
}

find_gene_start(list("A", "C", "A", "T", "G", "T", "A", "C"));
// returns list(list("T", "A", "C"))
find_gene_start(list("A", "T", "A", "G", "T", "A", "T", "G"));
// returns list(null)
find_gene_start(list("A", "T", "A", "G", "T", "A", "C", "G"));
// returns null

////////////////////////////////////////////////////////////
// Question 1F
////////////////////////////////////////////////////////////

function find_gene_end(xs) {
    // WRITE HERE.TAG,TAA,TGA
    function helper(xs, cnt) {
        return length(xs) < 3
           ? null
           : head(xs) === "T" && head(tail(xs)) === "A" && (head(tail(tail(xs))) === "G" || head(tail(tail(xs))) === "A")
             || (head(xs) === "T" && head(tail(xs)) === "G" && head(tail(tail(xs))) === "A")
           ? cnt
           : helper(tail(xs), cnt + 1);
    }
    const ans = helper(xs, 0);
    if (is_null(ans)) {
        return ans;
    }
    let a = 0;
    let result = null;
    while (a < ans && !is_null(xs)) {
        result = pair(head(xs), result);
        xs = tail(xs);
        a = a + 1;
    }
    return list(reverse(result));//外面再加一个list LOL，非常的坑
}

////////////////////////////////////////////////////////////
// Question 1G
////////////////////////////////////////////////////////////

function all_genes(xs) {
    // WRITE HERE.
    return is_null(xs)
           ? null
           : find_gene_end(find_gene_start(xs));
           //, all_genes(find_gene_start(xs)));
}
all_genes(list("C", "T", "A", "A", "G", "C"));
all_genes(list("A", "A", "T", "G", "A", "C", "T",
                                    "A", "G", "G"));
/*
//===========================================================
function assert(f, test_name, fnames) {
    display(test_name + ": " + (f() ? "PASS" : "FAIL"));
}
//===========================================================

assert(
    () => {
        return equal(all_genes(list("C", "T", "A", "A", "G", "C")),
                     null);
    },
    "Q1G-P01",
    ['all_genes']
);

assert(
    () => {
        return equal(all_genes(list("A", "A", "T", "G", "A", "C", "T",
                                    "A", "G", "G")),
                     list(list("A", "C")));
    },
    "Q1G-P02",
    ['all_genes']
);

assert(
    () => {
        return equal(all_genes(list("T", "A", "T", "G", "C", "A", "T",
                                    "A", "A", "G", "T", "A", "G", "A",
                                    "T", "G", "A", "T", "G", "A", "T")),
                     list(list("C", "A"), list("A")));
    },
    "Q1G-P03",
    ['all_genes']
);*/