////////////////////////////////////////////////////////////
// Question 3A
////////////////////////////////////////////////////////////

function evaluate_BAE_tree(bae_tree) {
    // WRITE HERE.
    return is_number(bae_tree)
           ? bae_tree
           : head(tail(bae_tree)) === "+"
           ? evaluate_BAE_tree(head(bae_tree)) + evaluate_BAE_tree(head(reverse(bae_tree)))
           : head(tail(bae_tree)) === "-"
           ? evaluate_BAE_tree(head(bae_tree)) - evaluate_BAE_tree(head(reverse(bae_tree)))
           : head(tail(bae_tree)) === "*"
           ? evaluate_BAE_tree(head(bae_tree)) * evaluate_BAE_tree(head(reverse(bae_tree)))
           : evaluate_BAE_tree(head(bae_tree)) / evaluate_BAE_tree(head(reverse(bae_tree)));
}


////////////////////////////////////////////////////////////
// Question 3B
////////////////////////////////////////////////////////////

/*function build_BAE_tree(bae_list) {
    // WRITE HERE.
    let front = null;
    let back = bae_list;
    while (!is_null(back)) {
        front = append(front, list(head(back)));
        back = tail(back);
        if (head(back) === ")") {
            
            return build_BAE_tree(pair(reverse(tail(tail(tail(tail(reverse(front)))))), pair() ));
        }
    }
}*/



////////////////////////////////////////////////////////////
// Question 3C
////////////////////////////////////////////////////////////

/*function evaluate_BAE(bae_list) {

    // WRITE HERE.
    return evaluate_BAE_tree(build_BAE_tree(bae_list));
}*/



////////////////////////////////////////////////////////////
// Question 3D
////////////////////////////////////////////////////////////

function check_parentheses(paren_list) {
    // WRITE HERE.
    if (is_null(paren_list)) {
        return true;
    }
    let l = null;
    let r = null;
    while(!is_null(paren_list)) {
        const h = head(paren_list);
        if (h === "(") {
            l = pair(1, l);
        } else {
            if (is_null(l)) {
                return false;
            }
            l = tail(l);
        }
        paren_list = tail(paren_list);//别写死循环！！！！！！
    }
    return is_null(l) && is_null(r);
}

//===========================================================
function assert(f, test_name, fnames) {
    display(test_name + ": " + (f() ? "PASS" : "FAIL"));
}

/*
////////////////////////////////////////////////////////////
// Test Cases for Q3B
////////////////////////////////////////////////////////////

assert(
    () => {
        const bae_tree = 23;
        const bae_list = list(23);
        return equal(build_BAE_tree(bae_list), bae_tree);
    },
    "Q3B-T1",
    ['build_BAE_tree']
);

assert(
    () => {
        const bae_tree = list(5, "*", 6);
        const bae_list = list("(", 5, "*", 6, ")");
        return equal(build_BAE_tree(bae_list), bae_tree);
    },
    "Q3B-T2",
    ['build_BAE_tree']
);

assert(
    () => {
        const bae_tree = list(5, "*", list(7, "+", 3));
        const bae_list = list("(", 5, "*", "(", 7, "+", 3, ")", ")");
        return equal(build_BAE_tree(bae_list), bae_tree);
    },
    "Q3B-T3",
    ['build_BAE_tree']
);

assert(
    () => {
        const bae_tree = list(list(8, "-", 2), "*", list(7, "+", 3));
        const bae_list = list("(", "(", 8, "-", 2, ")", "*",
                            "(", 7, "+", 3, ")", ")");
        return equal(build_BAE_tree(bae_list), bae_tree);
    },
    "Q3B-T4",
    ['build_BAE_tree']
);

assert(
    () => {
        const bae_tree = list(list(list(20, "/", 2), "-", 2), "*",
                            list(7, "+", 3));
        const bae_list = list("(", "(", "(", 20, "/", 2, ")", "-", 2, ")", "*",
                            "(", 7, "+", 3, ")", ")");
        return equal(build_BAE_tree(bae_list), bae_tree);
    },
    "Q3B-T5",
    ['build_BAE_tree']
);

assert(
    () => {
        const bae_tree = 100;
        const bae_list = list(100);
        return equal(build_BAE_tree(bae_list), bae_tree);
    },
    "Q3B-T6",
    ['build_BAE_tree']
);

assert(
    () => {
        const bae_tree = list(70, "-", 15);
        const bae_list = list("(", 70, "-", 15, ")");
        return equal(build_BAE_tree(bae_list), bae_tree);
    },
    "Q3B-T7",
    ['build_BAE_tree']
);

assert(
    () => {
        const bae_tree = list(list(list(7, "+", 5), "*", 3), "/",
                            list(list(20, "/", 2), "-", list(100, "-", 94)));
        const bae_list = list("(", "(", "(", 7, "+", 5, ")", "*", 3, ")", "/",
                            "(", "(", 20, "/", 2, ")", "-",
                                 "(", 100, "-", 94, ")", ")", ")");
        return equal(build_BAE_tree(bae_list), bae_tree);
    },
    "Q3B-T8",
    ['build_BAE_tree']
);



////////////////////////////////////////////////////////////
// Test Cases for Q3C
////////////////////////////////////////////////////////////

assert(
    () => {
        const bae_list = list(23);
        return equal(evaluate_BAE(bae_list), 23);
    },
    "Q3C-T1",
    ['evaluate_BAE']
);

assert(
    () => {
        const bae_list = list("(", 5, "*", 6, ")");
        return equal(evaluate_BAE(bae_list), 30);
    },
    "Q3C-T2",
    ['evaluate_BAE']
);

assert(
    () => {
        const bae_list = list("(", "(", "(", 20, "/", 2, ")", "-", 2, ")", "*",
                            "(", 7, "+", 3, ")", ")");
        return equal(evaluate_BAE(bae_list), 80);
    },
    "Q3C-T3",
    ['evaluate_BAE']
);
*/